<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron school | Traversing the Internets]]></title>
  <link href="http://samueldowens.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://samueldowens.github.io/"/>
  <updated>2013-10-17T09:01:59-04:00</updated>
  <id>http://samueldowens.github.io/</id>
  <author>
    <name><![CDATA[Samuel Owens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Twenty Four - Include or Extend for a Module?]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/17/flatiron-school-day-twenty-four-include-or-extend-for-a-module/"/>
    <updated>2013-10-17T08:49:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/17/flatiron-school-day-twenty-four-include-or-extend-for-a-module</id>
    <content type="html"><![CDATA[<p>Yesterday I found myself writing my first module. For those who don&rsquo;t know, in ruby a module is a package of methods that you write and store in a seperate place, which you can call on inside a class to include the methods contained within. These are used when you want to have the exact same methods included in multiple places, using a module is cleaner and DRY'er than repeating the method definitions in every class.</p>

<p>There are two ways to add a module to a class, <strong>include</strong> and <strong>extend</strong>. The <strong>include</strong> keyword will bring the module methods into the class as instance methods, allowing instances of the class to use the methods. The <strong>extend</strong> keyword will bring the module methods into the class as class methods, allowing the class itself to call those methods.</p>

<p>It&rsquo;s important to understand which of these two are appropriate to use on the module and to design and structure your module so that it can be used correctly. If you use the wrong keyword to bring the module into a class you will not end up with the expected functionality. Additionally, modules should be designed and structured with this in mind, separating methods that are intended to be instance methods from those that are intended to be class methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Twenty Three - RSpec Musings]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/16/flatiron-school-day-twenty-three-rspec-bullet-points/"/>
    <updated>2013-10-16T08:36:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/16/flatiron-school-day-twenty-three-rspec-bullet-points</id>
    <content type="html"><![CDATA[<p>Todays post is going to be short. I&rsquo;m going to write down some thoughts about RSpec and writing tests.</p>

<p>Write out what you want your tests to do without worrying about the actual syntax for the tests first.
Statements like &ldquo;it &lsquo;should do whatever this test should do&rsquo;&rdquo; do can be followed with pending on the next line.
This allows you to write out all of the ideas with what you would like your code to do without having to worry about any syntax yet.
You can then impliment tests as you&rsquo;re comfortable and write the corresponding code to pass them when the tests are ready.</p>

<p>Sometimes it&rsquo;s helpful to write out skeleton tests, to describe what features a given unit of work should DEFINITELY have without
worrying too much about potential features or tasks that it may need further down the line. Once you get the basics built out on
your files when you come across new functionality that is needed you can go back and add tests and then add the code to get those to pass.
This approach can save some time as you won&rsquo;t need to try and brainstorm every feature you might come across and can instead focus on making
sure your tests are good and that your code passes them. <strong>You can always add more tests later</strong></p>

<p>With the level of complexity of our current projects, writing tests often feels very frustrating. It feels like spending a lot of time writing out
very basic things about the code when we could be actually writing the program. Intellectually I&rsquo;m aware that this work will pay off down the line as projects become
more complex, so in the meantime I need to keep reminding myself that it&rsquo;s not slowing us down, it&rsquo;s preparing us for things to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Twenty-Two - SQL Bits]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/15/flatiron-school-day-twenty-two-sql-bits/"/>
    <updated>2013-10-15T08:34:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/15/flatiron-school-day-twenty-two-sql-bits</id>
    <content type="html"><![CDATA[<p>I started working on a <a href="https://github.com/samueldowens/hacker_news_scraper" target="_blank">mini-project</a> yesterday bto reinforce the different topics we&rsquo;re covering in Flatiron. While it&rsquo;s not done-enough to go over in detail yet I wanted to cover a few bits of SQL that I found particularly useful in getting the program to its current state.</p>

<p>The SQL side of the program exists to keep a unique record of articles off of Hacker News that meet certain criteria. The scrape can be run multiple times over multiple days, weeks, etc. so it was important that the SQL side of the program not continuously re-enter the same article over multiple scrapes. Here&rsquo;s what the code looks like&hellip;</p>

<p>```ruby database.rb
class Database</p>

<p>  @@db = SQLite3::Database.new(&lsquo;articles.db&rsquo;)
  @@db.execute(&ldquo;CREATE TABLE if NOT EXISTS articles(id INTEGER PRIMARY KEY ASC, title TEXT UNIQUE, url TEXT, parent_url TEXT, points INTEGER);&rdquo;)</p>

<p>  def self.insert(array)</p>

<pre><code>array.each do |article|
  sql = "REPLACE INTO articles(title, url, parent_url, points) VALUES (?,?,?,?)"
  @@db.execute(sql, article.title, article.url, article.parent_url, article.points)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>There are a few bits of this code I would like to highlight.</p>

<p><strong>&ldquo;CREATE TABLE if NOT EXISTS&rdquo; &ndash; </strong>This one should be familiar to most Flatiron students already, but since some of our projects and examples have assumed the existance of a table I thought it would be worth mentioning. The &lsquo;if NOT EXISTS&rsquo; part is important to make sure that you are not creating a new table every time the code runs, this code will only execute the first time the program runs, unless the &lsquo;articles&rsquo; table is deleted from the database (this would have to be done manually by the user).</p>

<p><strong>&ldquo;title TEXT UNIQUE&rdquo; &ndash; </strong>This is one that I had to look up what I wanted SQL to do before I could figure out how to do it. This tells the database that while the &lsquo;title&rsquo; column is not the primary key, that it is unique and that SQL should raise an error if something attempts to add an item with the same title as something else to the table.</p>

<p><strong>&ldquo;REPLACE INTO&rdquo; &ndash; </strong>The work-horse piece of code, normally we would use &lsquo;INSERT INTO&rsquo; but in this case, I chose to use &lsquo;REPLACE&rsquo; for two reasons. First, it resolves any conflicting titles by replacing the old entry with the newer one, which makes sure that we only have unique entries in the table. Second since it replaces the old version with the new one, it will update any other data about the article that has changed since the last time the scrape was run (for instance, if the number of points were to change).</p>

<p>These three peices that were previously unfamiliar to me do a lot of work in very little space. Because I don&rsquo;t need to write methods to check for some of the things these take care of automatically, we save a lot of space and the code is easy to read. Thanks for reading, I hope if you&rsquo;re working with SQL these little bits are helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Weekend Three - The Tap Method]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/14/flatiron-school-weekend-three-the-tap-method/"/>
    <updated>2013-10-14T10:07:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/14/flatiron-school-weekend-three-the-tap-method</id>
    <content type="html"><![CDATA[<p><img class="center <a" src="href="http://hopsandgrapesonline.com/images/uploads/32762.jpg">http://hopsandgrapesonline.com/images/uploads/32762.jpg</a>" title="&lsquo;#1 type of tap at the Flatiron School&rsquo; &lsquo;#1 type of tap at the Flatiron School&rsquo;" ></p>

<p>Today I wanted to talk about a couple ways I think the .tap method in Ruby is useful. The first time a lot of us at Flatiron saw this method, it was used in an RSpec test and threw many of us for a loop trying to figure out exactly what the test was doing. After using the method for a bit, it&rsquo;s become clearer what the tap method is, a shortcut.</p>

<p>```ruby Equivalent Code&hellip;</p>

<p>class Dog
attr_accessor :name, :favorite_food, :breed
end</p>

<h1>The Three code samples below all are based on the above class.</h1>

<p>clifford = Dog.new.tap{|x| x.name = &ldquo;Clifford&rdquo;; x.favorite_food = &ldquo;Children&rdquo;; x.breed = &ldquo;Big Red Dog&rdquo;}</p>

<h1>The code above and below this comment are equivalent.</h1>

<p>clifford = Dog.new</p>

<p>clifford.name = &ldquo;Clifford&rdquo;; clifford.favorite_food = &ldquo;Children&rdquo;; clifford.breed = &ldquo;Big Red Dog&rdquo;; clifford</p>

<h1>This code is also equal to the code below, in case semi-colons make you uncomfortable&hellip;</h1>

<p>clifford = Dog.new
clifford.name = &ldquo;Clifford&rdquo;
clifford.favorite_food = &ldquo;Children&rdquo;
clifford.breed = &ldquo;Big Red Dog.&rdquo;
clifford</p>

<p>```
<img class="center <a" src="href="http://images1.wikia.nocookie.net/__cb20100302194935/clifford/images/c/c3/Showim.jpg">http://images1.wikia.nocookie.net/__cb20100302194935/clifford/images/c/c3/Showim.jpg</a>" title="&lsquo;Those kids should be screaming and jumping off that roller coaster.&rsquo; &lsquo;Those kids should be screaming and jumping off that roller coaster.&rsquo;" ></p>

<p>So the three pieces of code above all return the same value with different ways of getting there. The tap method offers a few advantages over the others.</p>

<p>First, you get the same return out of a single line of code. This advantage should be obvious from looking at the code (you can paste the samples into IRB to confirm equality)</p>

<p>Second, you don&rsquo;t need to call the variable to get the return value, which also means&hellip;</p>

<p>Third, you don&rsquo;t have to store the object in a variable at all. This looks like&hellip;</p>

<p>```ruby The Following Code Samples return the same value.</p>

<h1>Original code from above</h1>

<p>clifford = Dog.new.tap{|x| x.name = &ldquo;Clifford&rdquo;; x.favorite_food = &ldquo;Children&rdquo;; x.breed = &ldquo;Big Red Dog&rdquo;}</p>

<h1>Same return value without having to store the object in a variable</h1>

<p>Dog.new.tap{|x| x.name = &ldquo;Clifford&rdquo;; x.favorite_food = &ldquo;Children&rdquo;; x.breed = &ldquo;Big Red Dog&rdquo;}</p>

<p>```</p>

<p>This allows you if you are creating a large number of objects and passing them into a larger data structure (hash, database, array) to not have to first store the object in a variable before passing the variable into your data structure, saving steps along the way. With the other ways of making clifford &lsquo;real&rsquo;, you would need to store the object in a variable to be able to manipulate it after it was made, with .tap you can make clifford exist and have traits without ever having to tell the computer to remember him.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Eighteen - Suck It Up, Break Your Code.]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/11/flatiron-school-day-eightteen-refactor_fu/"/>
    <updated>2013-10-11T08:32:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/11/flatiron-school-day-eightteen-refactor_fu</id>
    <content type="html"><![CDATA[<p>I was going to write another small technical post today but that is going to have to wait until tomorrow. Today I wanted to remind myself and anybody who reads this about the mental blocks with regard to refactoring your code. Here at Flatiron we follow the (I think Kent Beck) motto of &ldquo;Make it work, make it right, make it fast.&rdquo; Sometimes this leads to the first working piece of code being pretty ugly. If you&rsquo;ve just spent hours in a team working through pitfalls to get the code working, it may be overwhelming to go ahead and start refactoring the code once its running and/or all your tests are green.</p>

<p>The big thing I wanted to focus on is that provided you&rsquo;re not living in an alternate dimension where there is no Git, you can feel free to burn your working code to the ground and swim in its ashes. You still have that working code in version control, there is nothing intimidating about altering it to where it starts failing tests or stops functioning. Even if you never find a better solution on a given project, you never will if you don&rsquo;t start smashing your code and trying to rebuild them.</p>

<p>In Office Space they took the printer out into a field after one too many &ldquo;pc load letter&rdquo; errors and smashed it to pieces. Unfortunately with hardware, its pretty difficult to put back together. Count yourself lucky that with code that is not the case, you can destroy your project over and over again and roll it back if you aren&rsquo;t making useful progress.</p>

<p>Get over the fear of the red results and break your code, it&rsquo;s liberating.</p>
]]></content>
  </entry>
  
</feed>
