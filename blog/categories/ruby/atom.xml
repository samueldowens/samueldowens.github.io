<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My Flatiron School Blog]]></title>
  <link href="http://samueldowens.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://samueldowens.github.io/"/>
  <updated>2013-10-07T08:48:21-04:00</updated>
  <id>http://samueldowens.github.io/</id>
  <author>
    <name><![CDATA[Samuel Owens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Weekend Two]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/07/flatiron-school-weekend-two/"/>
    <updated>2013-10-07T08:38:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/07/flatiron-school-weekend-two</id>
    <content type="html"><![CDATA[<p>Weekend two was a lot of fun. I managed to end up pretty comfortable with SQL pretty early in the day and we moved onto some other new and interesting things later.</p>

<p>Namely Nokogiri, this ruby gem for scraping web pages was the big learning focus of my weekend. Our project was to use Nokogiri to scrape the Flatiron student webpage for information on each student and export that data into an SQL database. It took a lot of trial and error playing around with Nokogiri before we figured things out, but by the end my whole group was pretty comfortable navigating the trees of data that is HTML.</p>

<p>We also had to redo the quiz from week one but make it object oriented, having to have classes in each of the previous tests. I thought the difficulty on that assignment was pretty easy but that it was useful in providing repetition in looking at grouping things as a class.</p>

<p>Lastly we were given an assignment called playlister, which was a multi-file, multi-class assignment that had a suite of rspec tests that needed to be passed. I sure hope this was the stretch assignment for the weekend as I spent a lot of time struggling with it.</p>

<p>I&rsquo;m really looking forward to week three. After two weeks I&rsquo;m already amazed at the tools we&rsquo;re beginning to scratch the surface of using. I can&rsquo;t imagine after 10 more weeks how many cool things we&rsquo;ll be able to build. I feel like a child who just learned what a car can do but whose feet can&rsquo;t yet reach the pedals. Once they can it&rsquo;s going to be a fun time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Eleven]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/04/flatiron-school-day-eleven/"/>
    <updated>2013-10-04T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/04/flatiron-school-day-eleven</id>
    <content type="html"><![CDATA[<p>Day Eleven kicked off a day of very little actual Ruby. In the morning we worked on a debugging project where we were handed some broken ruby code and the expectations for how it was supposed to work and had to fix it. I really enjoyed that project, as much as I like building new things its also fun to fix broken stuff. After that though, the rest of the day was spent on SQL.</p>

<p>Something I like about Flatiron is that we learn everything from the ground up. The magic of a lot of things like Rails and Active Record will be understood by us as we will have learned to do everything without them. That is exactly how I want to learn to program. That said, it&rsquo;s also a pain in the butt. Writing SQL queries isn&rsquo;t conceptually difficult, though the new syntax creates some conflicts, but writing it in sublime as a .sql file and smashing it into a DB in BASH is a more tedious process than I think is probably necessary. I&rsquo;m about ready for Active Record!</p>

<p>Most of the classes issues seemed to stem from Queries and Joins. Most of the organizing of the databases came pretty naturally to most people I talked to, but there is a lot of syntax with queries/joins that can be pretty confusing. I&rsquo;m going to post a snippit of my code and try and explain it&hellip;</p>

<p>``` sql Queries and Joins</p>

<p>SELECT project.title, SUM(pledge.amount) AS &lsquo;total_pledge_amount&rsquo;
FROM
project
INNER JOIN
pledge
ON
project.id = pledge.project_id
GROUP BY
project.title;</p>

<p>```</p>

<p>So, this query has several parts which I will try and explain correctly one at a time.</p>

<p>The first is SELECT. This is the specific data we want this query to look at. In this case its the &lsquo;title&rsquo; column from the &lsquo;project&rsquo; table and the sum of the &lsquo;amount&rsquo; column from the &lsquo;pledge&rsquo; table. The AS key just renames the result of the SUM function to &lsquo;total_pledge_amount&rsquo; and could be removed and the query would still function. Next is FROM, we are joining from the project table, using an INNER JOIN with the pledge table. I reversed the places of project and pledge and got the same results, so I&rsquo;m not yet sure where it would be important to specify one table in front of another. After that is ON, which is where the JOIN will link the two tables based on a mutual key. In this case its the primary key of project (project.id) and the foreign key in pledge that corresponds with the project primary key (pledge.project_id). Lastly is GROUP BY for which i put &lsquo;project.title&rsquo; this orders the query results alphabetically by the &lsquo;title&rsquo; column in the &lsquo;project&rsquo; table. The result is a list of each project.title and the total amount of pledges that match each projects key.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Ten]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/03/flatiron-school-day-ten/"/>
    <updated>2013-10-03T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/03/flatiron-school-day-ten</id>
    <content type="html"><![CDATA[<p>Phew, day nine is over and in the rear view mirror and day ten kicked off
with a few hours of self-directed work. It really seemed to come at just
the right time for a lot of us, myself included. I got caught up on a lot
of the things that were giving me trouble and by the end of the day was
really feeling like I was back in the driver&rsquo;s seat with my learning.</p>

<p>I&rsquo;m finally starting to instinctively break things down into smaller chunks.
I was expecting this sort of progress to come with a light bulb over my head,
fireworks or some other sort of stark realization that I had made progress.
Instead it came from solving a problem and looking at my solution and realizing
that I solved it differently than I would have a couple days ago without even
noticing I was doing it.</p>

<p>I&rsquo;m also starting to get a little bit of a handle on refactoring. I managed
to get our pigeon hash problem working and then condensed some of my code
that was running in different parts of the program into a single method at
the end to execute all the sub-methods at once. I&rsquo;m happy that I spotted this
and was able to make my code better without breaking its functionality. After
looking at some of the solutions my classmates came up with however, I still
know that I have a lot of work to do with refactoring as some of their
solutions were brilliant!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Nine]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/02/flatiron-school-day-nine/"/>
    <updated>2013-10-02T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/02/flatiron-school-day-nine</id>
    <content type="html"><![CDATA[<p>Week two day two was a rough one for me. I&rsquo;m finally starting to feel really stressed by the material. I&rsquo;m spending a lot more time fighting my way through producing what I feel is sub-par code than I&rsquo;d like. I&rsquo;m really hoping that I&rsquo;m reaching the end of a plateau in my learning and will take a jump forward soon. I&rsquo;m having trouble breaking problems down into smaller pieces and still keeping track of everything. I&rsquo;m also having some issues figuring out how to refactor my code from the &lsquo;works&rsquo; stage to the &lsquo;right&rsquo; stage. Week 2 day 3 we get a big chunk of time to catch up on stuff though, so I&rsquo;m hoping that my not feeling confident about my code from the last day or two isn&rsquo;t uncommon and that I come out of Wednesday feeling a bit better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Eight]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/01/flatiron-school-day-8/"/>
    <updated>2013-10-01T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/01/flatiron-school-day-8</id>
    <content type="html"><![CDATA[<p>I came out of the weekend feeling like I really knew what I was doing, then Monday happened. At the beginning of the day I was feeling good about my competence level but once we really dug into nested hashes and how to access data inside of them the wheels really came off the rails for a while.</p>

<p>The first few hash projects I was able to get through cobbling together nested do blocks based on .each and the key varient but it was really messy. I felt like I was trying to break a problem down into simpler ones like Avi told us, but coming up with even more complicated answers that usually didn&rsquo;t work.</p>

<p>Then came Hashketball. A giant monstrosity of nested hashes that we had to find a bunch of ways of iterating through to get to the particular piece of data we wanted. At times we also had to compare various types of data that could be found throughout the nested hash jungle, all while trying to avoid the local predators (read: errors, fatigue, frustration). After what seemed like a day and a half but was really probably only a couple hours of fruitlessly banging on my keyboard trying to break the problem down into smaller problems, or try and get elaborate nested blocks to do what I wanted I finally found the heartbreakingly simple answer of how to access the hash how I wanted.</p>

<p>It was so simple I couldn&rsquo;t believe it. Or at least I couldn&rsquo;t believe it until the thought occured to me that rubyists likely have to do this sort of thing and since its ruby there has to be an easy way to do it, that&rsquo;s just the way ruby works.</p>

<p>``` ruby It looks so simple when you see it&hellip;
hash =
{
  :hash1 =>
  {</p>

<pre><code>:hash2 =&gt; 1,
:hash3 =&gt; 
{
  :hash4 =&gt; 2,
  :hash5 =&gt; 3
},
</code></pre>

<p>  },
  :hash6 => 4
}</p>

<h1>so to access the number 3.</h1>

<p>hash[:hash1][:hash3][:hash5]</p>

<h1>this looks at the &lsquo;hash&rsquo; created, then accesses deeper levels of the hash by</h1>

<h1>calling on keys in [].</h1>

<h1>you can also iterate through pieces of a hash.</h1>

<p>hash[:hash1][:hash3].each_key do |key|
  hash[:hash1][:hash3][key]
end</p>

<h1>This looks through the has to the key :hash3 then looks at each key within and</h1>

<h1>returns the value it&rsquo;s associated with.</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
