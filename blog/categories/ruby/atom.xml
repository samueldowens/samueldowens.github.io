<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My Flatiron School Blog]]></title>
  <link href="http://samueldowens.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://samueldowens.github.io/"/>
  <updated>2013-10-03T09:10:01-04:00</updated>
  <id>http://samueldowens.github.io/</id>
  <author>
    <name><![CDATA[Samuel Owens]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Nine]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/02/flatiron-school-day-nine/"/>
    <updated>2013-10-02T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/02/flatiron-school-day-nine</id>
    <content type="html"><![CDATA[<p>Week two day two was a rough one for me. I&rsquo;m finally starting to feel really stressed by the material. I&rsquo;m spending a lot more time fighting my way through producing what I feel is sub-par code than I&rsquo;d like. I&rsquo;m really hoping that I&rsquo;m reaching the end of a plateau in my learning and will take a jump forward soon. I&rsquo;m having trouble breaking problems down into smaller pieces and still keeping track of everything. I&rsquo;m also having some issues figuring out how to refactor my code from the &lsquo;works&rsquo; stage to the &lsquo;right&rsquo; stage. Week 2 day 3 we get a big chunk of time to catch up on stuff though, so I&rsquo;m hoping that my not feeling confident about my code from the last day or two isn&rsquo;t uncommon and that I come out of Wednesday feeling a bit better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Eight]]></title>
    <link href="http://samueldowens.github.io/blog/2013/10/01/flatiron-school-day-8/"/>
    <updated>2013-10-01T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/10/01/flatiron-school-day-8</id>
    <content type="html"><![CDATA[<p>I came out of the weekend feeling like I really knew what I was doing, then Monday happened. At the beginning of the day I was feeling good about my competence level but once we really dug into nested hashes and how to access data inside of them the wheels really came off the rails for a while.</p>

<p>The first few hash projects I was able to get through cobbling together nested do blocks based on .each and the key varient but it was really messy. I felt like I was trying to break a problem down into simpler ones like Avi told us, but coming up with even more complicated answers that usually didn&rsquo;t work.</p>

<p>Then came Hashketball. A giant monstrosity of nested hashes that we had to find a bunch of ways of iterating through to get to the particular piece of data we wanted. At times we also had to compare various types of data that could be found throughout the nested hash jungle, all while trying to avoid the local predators (read: errors, fatigue, frustration). After what seemed like a day and a half but was really probably only a couple hours of fruitlessly banging on my keyboard trying to break the problem down into smaller problems, or try and get elaborate nested blocks to do what I wanted I finally found the heartbreakingly simple answer of how to access the hash how I wanted.</p>

<p>It was so simple I couldn&rsquo;t believe it. Or at least I couldn&rsquo;t believe it until the thought occured to me that rubyists likely have to do this sort of thing and since its ruby there has to be an easy way to do it, that&rsquo;s just the way ruby works.</p>

<p>``` ruby It looks so simple when you see it&hellip;
hash =
{
  :hash1 =>
  {</p>

<pre><code>:hash2 =&gt; 1,
:hash3 =&gt; 
{
  :hash4 =&gt; 2,
  :hash5 =&gt; 3
},
</code></pre>

<p>  },
  :hash6 => 4
}</p>

<h1>so to access the number 3.</h1>

<p>hash[:hash1][:hash3][:hash5]</p>

<h1>this looks at the &lsquo;hash&rsquo; created, then accesses deeper levels of the hash by</h1>

<h1>calling on keys in [].</h1>

<h1>you can also iterate through pieces of a hash.</h1>

<p>hash[:hash1][:hash3].each_key do |key|
  hash[:hash1][:hash3][key]
end</p>

<h1>This looks through the has to the key :hash3 then looks at each key within and</h1>

<h1>returns the value it&rsquo;s associated with.</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Weekend One]]></title>
    <link href="http://samueldowens.github.io/blog/2013/09/30/flatiron-school-weekend-1/"/>
    <updated>2013-09-30T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/09/30/flatiron-school-weekend-1</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to wrap Friday-Sunday into one big post.</p>

<p>Friday began my love affair with case statements. They are beautiful creatures that really can save you a lot of code over if/else statements and also read a bit more clearly.</p>

<p>EXAMPLES&hellip;</p>

<p>``` ruby The case statement looks really clear&hellip;
def temperature_bot(temp)
  result = &ldquo;&rdquo;
  case temp</p>

<pre><code>when 0..16
  result = "cold"
when 17..21
  result = "comfortable"
when 22..100
  result = "hot"
else 
  result = "you're probably dead"
</code></pre>

<p>  end
end
```</p>

<p>``` ruby The if statements are a lot more cluttered&hellip;</p>

<p>def temperature_bot(temp)
  result = &ldquo;&rdquo;
  if temp > 0 &amp;&amp; temp &lt; 17</p>

<pre><code>result = "cold"
</code></pre>

<p>  elsif temp > 16 &amp;&amp; temp &lt; 22</p>

<pre><code>result = "comfortable"
</code></pre>

<p>  elsif temp > 21 &amp;&amp; temp &lt; 100</p>

<pre><code>result = "hot"
</code></pre>

<p>  else</p>

<pre><code>result = "you're probably dead"
</code></pre>

<p>  end
end
```</p>

<p>The difference doesn&rsquo;t seem to be a huge deal when you&rsquo;re scanning over the different code, but the clarity and ease of the case statement makes debugging easier when you&rsquo;re dealing with a larger set of code.</p>

<p>Over the weekend I managed to stay out of Manhattan. I don&rsquo;t know in the long run if this is a good or a bad thing, but I spent the weekend in Brooklyn coding, climbing with some Flatiron folks and managed to have enough time to watch a little football on Sunday.</p>

<p>I was really happy with the assessment we were given over the weekend. I think everybody at Flatiron goes through points in a day when they feel like the &lsquo;dumbest kid in class&rsquo; because they don&rsquo;t get something yet or are having trouble. Somehow, despite this happening to virtually everyone we don&rsquo;t seem to be able to shake that feeling just yet.</p>

<p>Having a solo assessment that goes over the material we&rsquo;ve covered so far went a long way to helping me confirm that I knew what I was doing so far. Not everything came to me right away but I managed to make my way through everything with a little help from google and my new best friend Rubular.</p>

<p>My &lsquo;take away&rsquo; from the weekend is the power of regular expressions. I think all of the code in my weekend homework that I am most proud of used regular expressions to accomplish a lot with very little code. They don&rsquo;t read as easily as normal ruby syntax but you can do some really powerful stuff with regular expressions and it makes them a lot of fun to use.</p>

<p>My goal for this week is to use yield and code blocks better. I was reviewing the Treehouse ruby material to brush up for week two and they showed some very cool ways to organize a chunk of code where the main method organizes and runs the sub-methods and yields to them to do the &lsquo;work&rsquo; to get the goals they want. This reminds me of the Jukebox assignment we worked on last week and makes me think that the program would have been a lot &lsquo;cleaner&rsquo; if I was more comfortable yielding to other methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Four]]></title>
    <link href="http://samueldowens.github.io/blog/2013/09/27/flatiron-school-day-four/"/>
    <updated>2013-09-27T08:23:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/09/27/flatiron-school-day-four</id>
    <content type="html"><![CDATA[<p>On day four we really got into Ruby. Most of the day was spent in lectures with a few labs mixed in and was punctuated by most of us being at the campus pretty late working on our homework.</p>

<p>A few takeaways that I need to make sure get ingrained in my head&hellip;</p>

<p>A method always returns the return of the last command it executes. This means if you write a method to manipulate an array and want to call that method later and have it return the manipulated array that you need to call the name of the array at the end of the method in order for the method itself to return that array.</p>

<p>Puts ALWAYS returns nil. So try really hard not to actually put it in a method. Definitely make sure that its not the last thing in an array unless I want the array to return nil.</p>

<p>I also saw syntax I like for short if statements to keep them more compact.</p>

<p>if x == 1
   puts &ldquo;x is 1!&rdquo;
end</p>

<p>is equivalent to</p>

<p>puts &ldquo;x is 1!&rdquo; if x == 1</p>

<p>I think the second iteration of code looks much cleaner and would like to start thinking of short if statements that way before I put them in a block.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School Day Three]]></title>
    <link href="http://samueldowens.github.io/blog/2013/09/26/flatiron-school-day-three/"/>
    <updated>2013-09-26T08:34:00-04:00</updated>
    <id>http://samueldowens.github.io/blog/2013/09/26/flatiron-school-day-three</id>
    <content type="html"><![CDATA[<p>Day Three was the easiest day for me thus far with comprehension. It was mostly a review of and practice with GIT, HTML and CSS with some Ruby at towards the end of the day. I think they&rsquo;re trying to get us a lot of repetition with the basics so that when they really hit the harder stuff full force we&rsquo;ll be less-lost on the basics.</p>

<p>I am the most responsible student I have ever been, albiet through three days. I pay attention in class, work as hard as I can on my projects and do my homework thouroughly right away. Yesterday I woke up feeling like I was starting to get a cold, so I made sure to get plenty of vitamin C and went to bed at 9:30 when I was finished with my work to get a little extra sleep to help combat this cold.</p>

<p>I&rsquo;m not yet sure if this is the sign of maturity, or the complete devotion to a singular focus. I&rsquo;m assuming more of the latter, I am so focused on this program that there is nothing else to be concerned about other than working hard at coding and taking care of distractions that might lead to my inability to focus or work as hard as I want to.</p>

<p>One thing that I did learn today was how to use a splat (*) in method arguments in Ruby. With the little Ruby I know, I really enjoy using arrays to solve problems when I can. Normally I would have the array set up ahead of time and use a method to manipulate the array or the data within to solve a given problem. splat gives you some other options on manipulating similar sets of data however.</p>

<p>You can set up a simple splat method as follows to see how it works:</p>

<p>def splat(*inputs)<br>
puts inputs<br>
end<br></p>

<p>splat(1,2,4,5,6)</p>

<p>This will output the following:</p>

<p>1<br>
2<br>
4<br>
5<br>
6<br></p>

<p>This allows you to take a variable quanitity of inputs (it will also take strings) and manipulate them one at a time before deciding what to do with them. An example of when this might be useful would be if you were pulling a bunch of variable types of data from a database and wanted to sort that data, you could have the pieces get input through a splat method and have the method sort them by type (string, float, integer) into arrays before manipulating or looking at the data in the arrays with further functions.</p>
]]></content>
  </entry>
  
</feed>
